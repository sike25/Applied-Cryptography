Applied Cryptography
Optional homework solutions

Name: Osasikemwen (Sike) Ogieva
E-mail: oogieva25@amherst.edu

================================================
Challenge-01: Meet NataSHA (5 points)
------------------------------------------------
The recovered key:
3bf1ce3e4dfc
or b';\xf1\xce>M\xfc'

The recovered plaintext blocks (both of them):
'Meet_NataSHA_which_is_not_a_SHA_although'
_we_use_it_not_to_hash_but_to_encrypt...'

Steps of your solution:
If encryption is
X -> A -> B -> C -> D -> E -> Y
Then decryption is
Y -> E -> D -> C -> B -> A -> X
Notice that the C's line up?
So, if we encrypt in three steps (bruteforcing K0, K1 and K2)
and decrypt in the three steps (bruteforcing K5, K4, K3)
and get the same C, we should have found the key (K0 to K5)
This is only 24 bit security, and is brute-force-able.

Note that decryption gives Cr|Cl and encryption Cl|Cr,
so we need to switch before we check!

Put your attack script and all files that it uses in a folder named meet_natasha, zip the folder, 
and submit also meet_natasha.zip. 
We should be able to unzip the submitted file and run your script without any additional effort.


===============================================
Challenge-02: Iterative Guessing (5 points)
-----------------------------------------------
The decrypted payload (including the flag):
'All computers are hackable. This has as much to do with the computer market as it does with the technologies. 
We prefer our software full of features and inexpensive, at the expense of security and reliability. 
That your computer can affect the security of Twitter is a market failure. 
The industry is filled with market failures that, until now, have been largely ignorable. 
As computers continue to permeate our homes, cars, businesses, these market failures will no longer be tolerable. 
Our only solution will be regulation, and that regulation will be foisted on us 
by a government desperate to "do something" in the face of disaster.
\r\n\r\nFLAG: 76bb5fe76d87d3bff541f78d6c6156b5\r\n\r\n
Your modern refrigerator is a computer that keeps things cold. 
Your oven, similarly, is a computer that makes things hot. 
An ATM is a computer with money inside. 
Your car is no longer a mechanical device with some computers inside; 
it\'s a computer with four wheels and an engine. 
Actually, it\'s a distributed system of over 100 computers with four wheels and an engine. 
And, of course, your phones became full-power general-purpose computers in 2007, when the iPhone was introduced.

Steps of your solution:
From the PRNG mechanism, we know the MAC key is MD5(Xi + Ti)
We know Xi from prngstate.txt. And we know Ti is earlier than 12:10 on March 19, 2022 so less than '2022031912100000'.
If we decremented '2022031912100000' and computed the MAC key until we verified the MAC successfully,
we would have found both Ti and the MAC key.

From the PRNG mechanism and the fact that the encryption key is generated right after the MAC key, 
we know the encryption key is MD5(MAC key + Xi + Tj)
We now know both Xi and the MAC key. And we know Tj comes after Ti.
So we increment Ti until we can achieve decryption (verified by checking the padding)
the we would have found the encryption key.

We slice off the iv and the encrypted portion from the message and run
DEC = AES.new(key = key, mode = AES.MODE_CBC, iv = iv)
DEC.decrypt(encrypted) --> decrypted payload

Put your attack script and all files that it uses in a folder named iterative_guessing, zip the folder, and submit also iterative_guessing.zip. 
We should be able to unzip the submitted file and run your script without any additional effort.

===============================================
Challenge-03: Encrypted Display Control (5 points)
-----------------------------------------------

The displayed message:
    _    ___ _____      _                _ _          _     ____                  _           _                        _ _      
   / \  |_ _|_   _|    / \   _ __  _ __ | (_) ___  __| |   / ___|_ __ _   _ _ __ | |_ ___    (_)___     ___ ___   ___ | | |     
  / _ \  | |  | |     / _ \ | '_ \| '_ \| | |/ _ \/ _` |  | |   | '__| | | | '_ \| __/ _ \   | / __|   / __/ _ \ / _ \| | |     
 / ___ \ | |  | |    / ___ \| |_) | |_) | | |  __/ (_| |  | |___| |  | |_| | |_) | || (_) |  | \__ \  | (_| (_) | (_) | |_|     
/_/   \_\___| |_|___/_/   \_\ .__/| .__/|_|_|\___|\__,_|___\____|_|   \__, | .__/ \__\___/___|_|___/___\___\___/ \___/|_(_)     
               |_____|      |_|   |_|                 |_____|         |___/|_|          |_____|   |_____|                       

AIT Applied Crypto is cool!


Steps of your solution:
I tried different seeds and printed out random bytes from the pseudorandom number generator
to observe that the key stream repeated every 256 bytes.
Then, I initialised a key stream array of 256 bytes, and attempted to fill it by xoring
sequence numbers to the ciphertext messages in places where they matched up.

Then, repeating the keystream, I xored it to the ciphertext to retrieve the plain text.
Then extracting every third byte, I collected the control sequence and passed it to 
the display function.


Put your attack script and all files that it uses in a folder named enc_display_ctr, zip the folder, 
and submit also enc_display_ctrl.zip. We should be able to unzip the submitted file and run your script without any additional effort.
